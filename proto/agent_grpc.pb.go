// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	InitInstance(ctx context.Context, in *InitInstanceRequest, opts ...grpc.CallOption) (Agent_InitInstanceClient, error)
	InstallRuntimes(ctx context.Context, in *InstallRuntimesRequest, opts ...grpc.CallOption) (Agent_InstallRuntimesClient, error)
	CheckDomainReachability(ctx context.Context, in *CheckDomainReachabilityRequest, opts ...grpc.CallOption) (Agent_CheckDomainReachabilityClient, error)
	ReconcileServedPortsState(ctx context.Context, in *ReconcileServedPortsStateRequest, opts ...grpc.CallOption) (Agent_ReconcileServedPortsStateClient, error)
	TryToStartLongRunningProcess(ctx context.Context, in *TryToStartLongRunningProcessRequest, opts ...grpc.CallOption) (Agent_TryToStartLongRunningProcessClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) InitInstance(ctx context.Context, in *InitInstanceRequest, opts ...grpc.CallOption) (Agent_InitInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/eleven.agent.Agent/InitInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentInitInstanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_InitInstanceClient interface {
	Recv() (*InitInstanceReply, error)
	grpc.ClientStream
}

type agentInitInstanceClient struct {
	grpc.ClientStream
}

func (x *agentInitInstanceClient) Recv() (*InitInstanceReply, error) {
	m := new(InitInstanceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) InstallRuntimes(ctx context.Context, in *InstallRuntimesRequest, opts ...grpc.CallOption) (Agent_InstallRuntimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/eleven.agent.Agent/InstallRuntimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentInstallRuntimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_InstallRuntimesClient interface {
	Recv() (*InstallRuntimesReply, error)
	grpc.ClientStream
}

type agentInstallRuntimesClient struct {
	grpc.ClientStream
}

func (x *agentInstallRuntimesClient) Recv() (*InstallRuntimesReply, error) {
	m := new(InstallRuntimesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) CheckDomainReachability(ctx context.Context, in *CheckDomainReachabilityRequest, opts ...grpc.CallOption) (Agent_CheckDomainReachabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], "/eleven.agent.Agent/CheckDomainReachability", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCheckDomainReachabilityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_CheckDomainReachabilityClient interface {
	Recv() (*CheckDomainReachabilityReply, error)
	grpc.ClientStream
}

type agentCheckDomainReachabilityClient struct {
	grpc.ClientStream
}

func (x *agentCheckDomainReachabilityClient) Recv() (*CheckDomainReachabilityReply, error) {
	m := new(CheckDomainReachabilityReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ReconcileServedPortsState(ctx context.Context, in *ReconcileServedPortsStateRequest, opts ...grpc.CallOption) (Agent_ReconcileServedPortsStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], "/eleven.agent.Agent/ReconcileServedPortsState", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentReconcileServedPortsStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ReconcileServedPortsStateClient interface {
	Recv() (*ReconcileServedPortsStateReply, error)
	grpc.ClientStream
}

type agentReconcileServedPortsStateClient struct {
	grpc.ClientStream
}

func (x *agentReconcileServedPortsStateClient) Recv() (*ReconcileServedPortsStateReply, error) {
	m := new(ReconcileServedPortsStateReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) TryToStartLongRunningProcess(ctx context.Context, in *TryToStartLongRunningProcessRequest, opts ...grpc.CallOption) (Agent_TryToStartLongRunningProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[4], "/eleven.agent.Agent/TryToStartLongRunningProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentTryToStartLongRunningProcessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_TryToStartLongRunningProcessClient interface {
	Recv() (*TryToStartLongRunningProcessReply, error)
	grpc.ClientStream
}

type agentTryToStartLongRunningProcessClient struct {
	grpc.ClientStream
}

func (x *agentTryToStartLongRunningProcessClient) Recv() (*TryToStartLongRunningProcessReply, error) {
	m := new(TryToStartLongRunningProcessReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	InitInstance(*InitInstanceRequest, Agent_InitInstanceServer) error
	InstallRuntimes(*InstallRuntimesRequest, Agent_InstallRuntimesServer) error
	CheckDomainReachability(*CheckDomainReachabilityRequest, Agent_CheckDomainReachabilityServer) error
	ReconcileServedPortsState(*ReconcileServedPortsStateRequest, Agent_ReconcileServedPortsStateServer) error
	TryToStartLongRunningProcess(*TryToStartLongRunningProcessRequest, Agent_TryToStartLongRunningProcessServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) InitInstance(*InitInstanceRequest, Agent_InitInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method InitInstance not implemented")
}
func (UnimplementedAgentServer) InstallRuntimes(*InstallRuntimesRequest, Agent_InstallRuntimesServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallRuntimes not implemented")
}
func (UnimplementedAgentServer) CheckDomainReachability(*CheckDomainReachabilityRequest, Agent_CheckDomainReachabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckDomainReachability not implemented")
}
func (UnimplementedAgentServer) ReconcileServedPortsState(*ReconcileServedPortsStateRequest, Agent_ReconcileServedPortsStateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReconcileServedPortsState not implemented")
}
func (UnimplementedAgentServer) TryToStartLongRunningProcess(*TryToStartLongRunningProcessRequest, Agent_TryToStartLongRunningProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method TryToStartLongRunningProcess not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_InitInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitInstanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).InitInstance(m, &agentInitInstanceServer{stream})
}

type Agent_InitInstanceServer interface {
	Send(*InitInstanceReply) error
	grpc.ServerStream
}

type agentInitInstanceServer struct {
	grpc.ServerStream
}

func (x *agentInitInstanceServer) Send(m *InitInstanceReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_InstallRuntimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallRuntimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).InstallRuntimes(m, &agentInstallRuntimesServer{stream})
}

type Agent_InstallRuntimesServer interface {
	Send(*InstallRuntimesReply) error
	grpc.ServerStream
}

type agentInstallRuntimesServer struct {
	grpc.ServerStream
}

func (x *agentInstallRuntimesServer) Send(m *InstallRuntimesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_CheckDomainReachability_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CheckDomainReachabilityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).CheckDomainReachability(m, &agentCheckDomainReachabilityServer{stream})
}

type Agent_CheckDomainReachabilityServer interface {
	Send(*CheckDomainReachabilityReply) error
	grpc.ServerStream
}

type agentCheckDomainReachabilityServer struct {
	grpc.ServerStream
}

func (x *agentCheckDomainReachabilityServer) Send(m *CheckDomainReachabilityReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ReconcileServedPortsState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReconcileServedPortsStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ReconcileServedPortsState(m, &agentReconcileServedPortsStateServer{stream})
}

type Agent_ReconcileServedPortsStateServer interface {
	Send(*ReconcileServedPortsStateReply) error
	grpc.ServerStream
}

type agentReconcileServedPortsStateServer struct {
	grpc.ServerStream
}

func (x *agentReconcileServedPortsStateServer) Send(m *ReconcileServedPortsStateReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_TryToStartLongRunningProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TryToStartLongRunningProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).TryToStartLongRunningProcess(m, &agentTryToStartLongRunningProcessServer{stream})
}

type Agent_TryToStartLongRunningProcessServer interface {
	Send(*TryToStartLongRunningProcessReply) error
	grpc.ServerStream
}

type agentTryToStartLongRunningProcessServer struct {
	grpc.ServerStream
}

func (x *agentTryToStartLongRunningProcessServer) Send(m *TryToStartLongRunningProcessReply) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eleven.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitInstance",
			Handler:       _Agent_InitInstance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InstallRuntimes",
			Handler:       _Agent_InstallRuntimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CheckDomainReachability",
			Handler:       _Agent_CheckDomainReachability_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReconcileServedPortsState",
			Handler:       _Agent_ReconcileServedPortsState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TryToStartLongRunningProcess",
			Handler:       _Agent_TryToStartLongRunningProcess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}
